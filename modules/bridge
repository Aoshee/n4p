#!/bin/bash
##############################################
# Do all prerun variables and safty measures #
# before anything else starts happening      #
##############################################
if [[ $(id -u) != 0 ]]; then # Verify we are root if not exit
   echo "Please Run This Script As Root or With Sudo!" 1>&2
   exit 1
fi

#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="${DIR}/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
DIR_CONF=/etc/n4p
DIR_LOGO=/usr/share/n4p

#######################################
# Building a sane working environment #
#######################################
get_name() # Retrieve the config values
{
    USE=$(grep $1 ${DIR_CONF}/n4p.conf | awk -F= '{print $2}')
}

get_state() # Retrieve the state of interfaces
{
    STATE=$(ip addr list | grep -i $1 | grep -i DOWN | awk -Fstate '{print $2}' | cut -d ' ' -f 2)
}

get_inet() # Retrieve the ip of the interface
{
    INET=$(ip addr list | grep -i $1 | grep -i inet | awk '{print $2}')
}

get_RCstatus() # What is the status from OpenRC of the service
{
    STATUS=$(/etc/init.d/net.$1 status | sed 's/* status: //g' | cut -d ' ' -f 2)
}

depends()
{
    get_name "IFACE0="; IFACE0=$USE
    get_name "IFACE1="; IFACE1=$USE
    get_name "AP="; UAP=$USE #This is what we name the AP via the config file
    get_name "BRIDGED="; BRIDGED=$USE
    get_name "BRIDGE_NAME="; BRIDGE_NAME=$USE
    get_name "OS="; OS=$USE
    IPT="/sbin/iptables"
    AP="at0" #This is the device name as per "ip addr"
    AP_GATEWAY=$(grep routers ${DIR_CONF}/dhcpd.conf | awk -Frouters '{print $2}' | cut -d ';' -f 1 | cut -d ' ' -f 2)
    AP_SUBNET=$(grep netmask ${DIR_CONF}/dhcpd.conf | awk -Fnetmask '{print $2}' | cut -d '{' -f 1 | cut -d ' ' -f 2 | cut -d ' ' -f 1)
    AP_IP=$(grep netmask ${DIR_CONF}/dhcpd.conf | awk -Fnetmask '{print $1}' | cut -d ' ' -f 1)
    AP_BROADCAST=$(grep broadcast-address ${DIR_CONF}/dhcpd.conf | awk -Fbroadcast-address '{print $2}' | cut -d ';' -f 1 | cut -d ' ' -f 2)
    # Text color variables
    TXT_UND=$(tput sgr 0 1)          # Underline
    TXT_BLD=$(tput bold)             # Bold
    BLD_RED=${txtbld}$(tput setaf 1) # red
    BLD_YEL=${txtbld}$(tput setaf 2) # Yellow
    BLD_ORA=${txtbld}$(tput setaf 3) # orange
    BLD_BLU=${txtbld}$(tput setaf 4) # blue
    BLD_PUR=${txtbld}$(tput setaf 5) # purple
    BLD_TEA=${txtbld}$(tput setaf 6) # teal
    BLD_WHT=${txtbld}$(tput setaf 7) # white
    TXT_RST=$(tput sgr0)             # Reset
    INFO=${BLD_WHT}*${TXT_RST}       # Feedback
    QUES=${BLD_BLU}?${TXT_RST}       # Questions
    PASS="${BLD_TEA}[${TXT_RSR}${BLD_WHT} OK ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    WARN="${BLD_TEA}[${TXT_RST}${BLD_PUR} * ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    # Start text with $BLD_YEL variable and end the text with $TXT_RST
}


#################################################################
#################Verify our DHCP and bridge needs################
#################################################################
openrc_bridge()
{
    # OpenRC needs sym links to bring the interface up. Verify they exist as needed if not make them then set proper state
    if [[ -e /etc/init.d/net.$BRIDGE_NAME ]]; then
        get_RCstatus "$BRIDGE_NAME"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$BRIDGE_NAME; sleep 1; ip link set $BRIDGE_NAME down
    else
        ln -s /etc/init.d/net.lo /etc/init.d/net.$BRIDGE_NAME
    fi

    if [[ -e /etc/init.d/net.$RESP_BR_1 ]]; then
        get_RCstatus "$RESP_BR_1"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$RESP_BR_1 stop; sleep 1; ip link set $RESP_BR_1 down
    fi

    if [[ -e /etc/init.d/net.$RESP_BR_2 ]]; then
        get_RCstatus "$RESP_BR_2"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$RESP_BR_2 stop; sleep 1; ip link set $RESP_BR_2 down
    fi

    # This insures $RESP_BR_1 & RESP_BR_2 does not have an ip and then removes it if it does since the bridge handles this
    get_inet "$RESP_BR_1"
    [[ -n $INET ]] && ip addr del $CHK_IP dev $RESP_BR_1

    get_inet "$RESP_BR_2"
    [[ -n $INET ]] && ip addr del $CHK_IP dev $RESP_BR_2

    echo -ne "\n Building $BRIDGE_NAME now with $BRIDGE_NAME $RESP_BR_2 $BRIDGE_NAME_RESP_BR_1"
    [[ $UAP == "HOSTAPD" ]] && iw dev $RESP_BR_2 set 4addr on

    get_state "$RESP_BR_2"
    while [[ $STATE == 'DOWN' || -z $(ip addr list | grep $RESP_BR_2) ]]; do
        sleep 0.2
        ip link set $RESP_BR_2 up
        get_state "$RESP_BR_2"
    done

    get_state "$RESP_BR_1"
    while [[ $STATE == 'DOWN' || -z $(ip addr list | grep $RESP_BR_1) ]]; do
        sleep 0.2
        ip link set $RESP_BR_1 up
        get_state "$RESP_BR_1"
    done
    sleep 2
    brctl addbr $BRIDGE_NAME
    sleep 0.3
    brctl addif $BRIDGE_NAME $RESP_BR_1
    sleep 0.3
    brctl addif $BRIDGE_NAME $RESP_BR_2
    sleep 0.3
    ip link set $BRIDGE_NAME up
    sleep 0.3
    ./dhcp
}

fbridge()
{
    if [[ $BRIDGED == "True" ]]; then
        RESP_BR_1=$IFACE0
        raed -p "Am I to bridge interface $AP or $IFACE1 ?" AIRBASE
        [[ $AIRBASE == "$AP" ]] && RESP_BR_2=$AP || RESP_BR_2=$IFACE1
        openrc_bridge
    elif [[ $BRIDGED != "False" ]]; then
        echo "echo [$WARN] ERROR in n4p.conf configuration file, no Bridge found"
    fi
}
depends
fbridge