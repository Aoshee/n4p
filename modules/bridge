#!/bin/bash
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#     This Shit is deprecated update it ASAP!!
#     Things are likely broken by now
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
###############################################
# Do all prerun variables and safety measures #
# before anything else starts happening       #
###############################################
#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
source ${DIR}/userspace
depends

DIR_CONF=/etc/n4p/

#################################################################
#################Verify our DHCP and bridge needs################
#################################################################
openrc_bridge()
{
    # OpenRC needs sym links to bring the interface up. Verify they exist as needed if not make them then set proper state
    if [[ -e /etc/init.d/net.$BRIDGE_NAME ]]; then
        get_RCstatus "$BRIDGE_NAME"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$BRIDGE_NAME status; sleep 1; ip link set $BRIDGE_NAME down
    else
        ln -s /etc/init.d/net.lo /etc/init.d/net.$BRIDGE_NAME
    fi

    if [[ -e /etc/init.d/net.$RESP_BR_1 ]]; then
        get_RCstatus "$RESP_BR_1"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$RESP_BR_1 stop; sleep 1; ip link set $RESP_BR_1 down
    fi

    if [[ -e /etc/init.d/net.$RESP_BR_2 ]]; then
        get_RCstatus "$RESP_BR_2"
        [[ $STATUS == 'started' ]] && /etc/init.d/net.$RESP_BR_2 stop; sleep 1; ip link set $RESP_BR_2 down
    fi

    # This insures $RESP_BR_1 & RESP_BR_2 does not have an ip and then removes it if it does since the bridge handles this
    # setting ip and route doesn't always take, lets ensure it sticks and check no other routes or ip's are getting assigned not by us then remove them if so.
    local CHK_GATEWAY=$(ip addr | grep $AP | grep -i inet | awk -Finet '{print $2}' | awk -F brd '{print $1}' | cut -d ' ' -f 2)
    [[ -n $CHK_GATEWAY && $CHK_GATEWAY != "${AP_GATEWAY}/32" ]] && ip addr del $CHK_IP dev $AP

    local CHK_IP=$(ip route | grep $AP | awk -Fvia '{print $1}' | cut -d ' ' -f 1)
    [[ -n $CHK_IP && $CHK_IP != "${AP_IP}/24" ]] && ip route flush $CHK_IP

    get_inet "$RESP_BR_1"
    [[ -n $INET ]] && ip addr del $CHK_IP dev $RESP_BR_1

    get_inet "$RESP_BR_2"
    [[ -n $INET ]] && ip addr del $CHK_IP dev $RESP_BR_2

    echo -ne "\n Building $BRIDGE_NAME now with $BRIDGE_NAME $RESP_BR_2 $BRIDGE_NAME_RESP_BR_1"
    [[ $UAP == "HOSTAPD" ]] && iw dev $RESP_BR_2 set 4addr on

    get_state "$RESP_BR_2"
    while [[ $STATE == 'DOWN' || -z $(ip addr list | grep $RESP_BR_2) ]]; do
        sleep 0.2
        ip link set $RESP_BR_2 up
        get_state "$RESP_BR_2"
    done

    get_state "$RESP_BR_1"
    while [[ $STATE == 'DOWN' || -z $(ip addr list | grep $RESP_BR_1) ]]; do
        sleep 0.2
        ip link set $RESP_BR_1 up
        get_state "$RESP_BR_1"
    done
    sleep 2
    brctl addbr $BRIDGE_NAME
    sleep 0.3
    brctl addif $BRIDGE_NAME $RESP_BR_1
    sleep 0.3
    brctl addif $BRIDGE_NAME $RESP_BR_2
    sleep 0.3
    ip link set $BRIDGE_NAME up
    sleep 0.3
    ./dhcp
    sleep 4
}

fbridge()
{
    if [[ $BRIDGED == "True" ]]; then
        RESP_BR_1=$IFACE0
        read -p "Am I to bridge interface $AP or $IFACE1 ? " THE_BRIDGE
        [[ $THE_BRIDGE == "$AP" ]] && RESP_BR_2=$AP || RESP_BR_2=$IFACE1
        openrc_bridge
    elif [[ $BRIDGED != "False" ]]; then
        echo "${WARN} ERROR in n4p.conf configuration file, no Bridge found"
    else
        echo "Bridging is disabled in n4p config file"
        sleep 3
    fi
}
close()
{
    read -p "Press Enter to exit" stuff
    exit 0
}
depends
fbridge
close