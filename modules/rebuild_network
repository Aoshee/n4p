#!/bin/bash
##############################################
# Do all prerun variables and safty measures #
# before anything else starts happening      #
##############################################
if [[ $(id -u) != 0 ]]; then # Verify we are root if not exit
   echo "Please Run This Script As Root or With Sudo!" 1>&2
   exit 1
fi

#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="${DIR}/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
DIR_CONF=/etc/n4p
DIR_LOGO=/usr/share/n4p

#######################################
# Building a sane working environment #
#######################################
get_name() # Retrieve the config values
{
    USE=$(grep $1 ${DIR_CONF}/n4p.conf | awk -F= '{print $2}')
}

get_state() # Retrieve the state of interfaces
{
    STATE=$(ip addr list | grep -i $1 | grep -i DOWN | awk -Fstate '{print $2}' | cut -d ' ' -f 2)
}

get_RCstatus() # What is the status from OpenRC of the service
{
    STATUS=$(/etc/init.d/net.$1 status | sed 's/* status: //g' | cut -d ' ' -f 2)
}

depends()
{
    get_name "NetworkManager="; NetworkManager=$USE
    get_name "IFACE0="; IFACE0=$USE
    get_name "IFACE1="; IFACE1=$USE
    get_name "BRIDGE_NAMED="; BRIDGE_NAMED=$USE
    get_name "BRIDGE_NAME_NAME="; BRIDGE_NAME_NAME=$USE
    get_name "OS="; OS=$USE
    # Text color variables
    TXT_UND=$(tput sgr 0 1)          # Underline
    TXT_BLD=$(tput bold)             # Bold
    BLD_RED=${txtbld}$(tput setaf 1) # red
    BLD_YEL=${txtbld}$(tput setaf 2) # Yellow
    BLD_ORA=${txtbld}$(tput setaf 3) # orange
    BLD_BLU=${txtbld}$(tput setaf 4) # blue
    BLD_PUR=${txtbld}$(tput setaf 5) # purple
    BLD_TEA=${txtbld}$(tput setaf 6) # teal
    BLD_WHT=${txtbld}$(tput setaf 7) # white
    TXT_RST=$(tput sgr0)             # Reset
    INFO=${BLD_WHT}*${TXT_RST}       # Feedback
    QUES=${BLD_BLU}?${TXT_RST}       # Questions
    PASS="${BLD_TEA}[${TXT_RSR}${BLD_WHT} OK ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    WARN="${BLD_TEA}[${TXT_RST}${BLD_PUR} * ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    # Start text with $BLD_YEL variable and end the text with $TXT_RST
rebuild_network()
{
    get_RCstatus $BRIDGE_NAME
    [[ $STATUS == 'started' ]] && /etc/init.d/net.$BRIDGE_NAME stop

    get_state "$BRDIGE"
    [[ $STATE != 'DOWN' ]] && ip link set $BRDIGE down

    brctl delif "$BRIDGE_NAME $RESP_BR_1"
    brctl delif "$BRIDGE_NAME $RESP_BR_2"
    brctl delbr "$BRIDGE_NAME"
    brctl show

    echo "$INFO It's now time to bring your default network interface back up"
    if [[ $NetworkManager != "True" ]]; then
        get_RCstatus "$IFACE0"
        if [[ $STATUS != 'started' ]]; then
            get_state "$IFACE0"
            [[ $STATE == 'DOWN' ]] && ip link set $IFACE0 up
            /etc/init.d/net.$IFACE0 start
        fi
        echo "$INFO The environment is now sanitized cya"
    else
        if [[ $OS == "Pentoo" ]]; then
            get_RCstatus "$NetworkManager"
            [[ $STATUS != 'started' ]] && /etc/init.d/NetworkManager start
        else
            service network-manager start
        fi
        echo "$INFO The environment is now sanitized cya"
    fi
    exit 0
}